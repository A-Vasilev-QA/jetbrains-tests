package qa.avasilev.tests;

import io.qameta.allure.Description;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import qa.avasilev.pages.IdeaDownloadPage;
import qa.avasilev.pages.IdeaPage;
import qa.avasilev.pages.MainPage;

import static com.codeborne.selenide.Selenide.*;
import static com.codeborne.selenide.Condition.*;
import static com.codeborne.selenide.WebDriverConditions.*;
import static io.qameta.allure.Allure.step;
import static org.junit.jupiter.api.Assertions.*;


public class MainTest extends TestBase {
    @Test
    @DisplayName("IntelliJ IDEA page can be reached from upper menu and contains correct links")
    void ideaPageCanBeOpenedFrmUpperMenuTest() {

        step("Open https://www.jetbrains.com/", () -> {
            open("/");
        });

        MainPage mainPage = new MainPage();

        step("Open Dev tools upper menu", () -> {
            mainPage.mainMenu.openSubmenu("Developer Tools");
            assertEquals("IDEs", mainPage.mainMenu.getMainSubmenuFirstHeader());
        });

        step("Click IDEA menu item", () -> {
            mainPage.mainMenu.clickMainSubmenuItem("IntelliJ IDEA");
        });

        IdeaPage ideaPage = new IdeaPage();

        step("Verify IDEA page", () -> {
            webdriver().shouldHave(urlContaining("idea"));
            assertEquals("IntelliJ IDEA", ideaPage.secondMenu.getProductHeader());
        });

        step("Open download page", () -> {
            ideaPage.clickDownloadButton();
        });

        IdeaDownloadPage ideaDownloadPage = new IdeaDownloadPage();

        step("Verify Windows download link", () -> {
            ideaDownloadPage.selectWindows();
            assertTrue(ideaDownloadPage.getUltimateDownloadUrl().contains("platform=windows"));
        });

        step("Verify macOS download link", () -> {
            ideaDownloadPage.selectMacOs();
            assertTrue(ideaDownloadPage.getUltimateDownloadUrl().contains("platform=mac"));
        });

        step("Verify Linux download link", () -> {
            ideaDownloadPage.selectLinux();
            assertTrue(ideaDownloadPage.getUltimateDownloadUrl().contains("platform=linux"));
        });
    }

    @Test
    @DisplayName("IntelliJ IDEA page can be reached from searh field and second menu")
    public void ideaPageCanBeSearchedTest() {

        step("Open https://www.jetbrains.com/", () -> {
            open("/");
        });

        MainPage mainPage = new MainPage();

        step("Search IntelliJ IDEA and click most relevant result", () -> {
            mainPage.mainMenu.quickSearch("IntelliJ IDEA", 0);
        });

        IdeaPage ideaPage = new IdeaPage();

        step("Click download button button in the upper menu", () -> {
            ideaPage.secondMenu.secondMenuDownload();
        });

        IdeaDownloadPage ideaDownloadPage = new IdeaDownloadPage();

        step("Verify Windows download link", () -> {
            ideaDownloadPage.selectWindows();
            assertTrue(ideaDownloadPage.getUltimateDownloadUrl().contains("platform=windows"));
        });

        step("Verify macOS download link", () -> {
            ideaDownloadPage.selectMacOs();
            assertTrue(ideaDownloadPage.getUltimateDownloadUrl().contains("platform=mac"));
        });

        step("Verify Linux download link", () -> {
            ideaDownloadPage.selectLinux();
            assertTrue(ideaDownloadPage.getUltimateDownloadUrl().contains("platform=linux"));
        });
    }


/*
    @Test
    @Description("Autogenerated test")
    @DisplayName("Page title should have header text")
    void titleTest() {
        step("Open url 'https://www.jetbrains.com/'", () ->
            open("https://www.jetbrains.com/"));

        step("Page title should have text 'JetBrains: Essential tools for software developers and teams'", () -> {
            String expectedTitle = "JetBrains: Essential tools for software developers and teams";
            String actualTitle = title();

            assertThat(actualTitle).isEqualTo(expectedTitle);
        });
    }

    @Test
    @Description("Autogenerated test")
    @DisplayName("Page console log should not have errors")
    void consoleShouldNotHaveErrorsTest() {
        step("Open url 'https://www.jetbrains.com/'", () ->
            open()
        );

        step("Console logs should not contain text 'SEVERE'", () -> {
            String consoleLogs = DriverUtils.getConsoleLogs();
            String errorText = "SEVERE";

            assertThat(consoleLogs).doesNotContain(errorText);
        });
    }*/
}